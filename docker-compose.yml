services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: queimadai-postgres
    environment:
      POSTGRES_DB: queimadai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d queimadai"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: queimadai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # AI Core (Python)
  ai-core:
    build:
      context: ./ai-core
      dockerfile: Dockerfile
    container_name: queimadai-ai-core
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./ai-core:/app
      - ./models:/app/models
      - ./datasets:/app/datasets
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: python -c "print('AI Core ready for detection requests'); import time; time.sleep(86400)"

  # API (Node.js)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: queimadai-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=queimadai
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - REDIS_URL=redis://redis:6379
      - AI_SERVICE_URL=http://ai-core:8000
    volumes:
      - ./uploads:/app/uploads
      - ./api/src:/app/src # Para desenvolvimento
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-core:
        condition: service_started
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: pnpm dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: queimadai-network
